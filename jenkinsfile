pipeline {
    // Agent with Trivy installed, identified by a label
    agent any
 
    stages {
        // Stage 1: Checkout the source code
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                checkout scm
            }
        }
 
        // Stage 2: Scan for vulnerabilities in software dependencies
        stage('Scan Repository for Dependencies') {
            steps {
                script {
                    try {
                        echo "Scanning repository for software vulnerabilities..."
                        
                        // Use 'trivy fs' to find vulnerabilities in lock files, etc.
                        sh '''
                            trivy fs . \
                                --scanners vuln \
                                --severity HIGH,CRITICAL \
                                --exit-code 1 \
                                --ignore-unfixed \
                                --format table \
                                --output trivy-dependency-report.txt
                        '''
                        
                        echo "Trivy dependency scan completed. No HIGH or CRITICAL issues found."
                        
                    } catch (Exception e) {
                        echo "Trivy found critical software vulnerabilities. Failing the build."
                        error "Build failed due to software dependency vulnerabilities."
                        
                    } finally {
                        // Archive the dependency scan report
                        echo "Archiving Trivy dependency scan report..."
                        archiveArtifacts artifacts: 'trivy-dependency-report.txt', allowEmptyArchive: true
                    }
                }
            }
        }
 
        // Stage 3: NEW - Scan Terraform files for IaC misconfigurations
        stage('Scan Terraform for IaC Misconfigurations') {
            steps {
                script {
                    try {
                        echo "Scanning Terraform files for Azure AKS misconfigurations..."
                        
                        // 1. Use 'trivy config' to scan IaC files like Terraform
                        sh '''
                            trivy config . \
                                --severity HIGH,CRITICAL \
                                --exit-code 1 \
                                --format table \
                                --output trivy-iac-report.txt
                        '''
                        
                        echo "Trivy IaC scan completed. No HIGH or CRITICAL misconfigurations found."
 
                    } catch (Exception e) {
                        // 2. This block runs if Trivy finds issues in the Terraform code
                        echo "Trivy found critical IaC misconfigurations. Failing the build."
                        error "Build failed due to IaC misconfigurations in Terraform files."
 
                    } finally {
                        // 3. Archive the IaC scan report with a different name
                        echo "Archiving Trivy IaC scan report..."
                        archiveArtifacts artifacts: 'trivy-iac-report.txt', allowEmptyArchive: true
                    }
                }
            }
        }
    }
 
    post {
        // This runs at the end of the pipeline
        always {
            echo "Pipeline finished."
            cleanWs()
        }
    }
}
